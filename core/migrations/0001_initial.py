# Generated by Django 5.2.1 on 2025-07-15 09:06

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('exploitant', 'Exploitant'), ('entreprise', 'Entreprise'), ('client', 'Client')], max_length=20)),
                ('company_name', models.CharField(max_length=255, verbose_name="Nom de l'entreprise")),
                ('siret_number', models.CharField(blank=True, max_length=14, null=True, unique=True, verbose_name='SIRET')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Adresse')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='Ville')),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='Code postal')),
                ('country', models.CharField(blank=True, max_length=100, null=True, verbose_name='Pays')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, verbose_name='Téléphone')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'db_table': 'utilisateur',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Chantier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255, verbose_name='Nom du chantier')),
                ('maitre_ouvrage', models.CharField(max_length=255)),
                ('entreprise_terrassement', models.CharField(max_length=255)),
                ('date_creation', models.DateField(default=django.utils.timezone.now)),
                ('localisation', models.CharField(max_length=255)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('utilisateur', models.ForeignKey(blank=True, help_text="Responsable automatiquement défini à l'utilisateur connecté.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='chantiers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Chantier',
                'verbose_name_plural': 'Chantiers',
                'db_table': 'chantier',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Gisement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, editable=False, help_text='Nom du gisement, généré automatiquement si vide.', max_length=255, null=True, unique=True)),
                ('date_creation', models.DateField(default=django.utils.timezone.now)),
                ('commune', models.CharField(max_length=100)),
                ('periode_terrassement', models.CharField(max_length=100)),
                ('volume_terrasse', models.DecimalField(decimal_places=2, max_digits=10)),
                ('materiau', models.CharField(max_length=255)),
                ('localisation', models.CharField(max_length=255)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('type_de_sol', models.CharField(choices=[('limon', 'Limon'), ('argile', 'Argile'), ('terre', 'Terre'), ('gravier', 'Gravier'), ('sableux', 'Sableux'), ('argileux', 'Argileux'), ('caillouteux', 'Caillouteux'), ('autre', 'Autre')], default='limon', max_length=20)),
                ('chantier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gisements', to='core.chantier')),
                ('utilisateur', models.ForeignKey(blank=True, help_text="Responsable automatiquement défini à l'utilisateur connecté.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gisements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Gisement',
                'verbose_name_plural': 'Gisements',
                'db_table': 'gisement',
                'ordering': ['-periode_terrassement'],
            },
        ),
        migrations.CreateModel(
            name='DocumentGisement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_document', models.CharField(blank=True, choices=[('photo', 'Photo'), ('geotechnique', 'Analyse géotechnique'), ('pollution', 'Analyse pollution'), ('agronomique', 'Analyse agronomique'), ('autre', 'Autre document')], default='autre', max_length=50, null=True)),
                ('fichier', models.FileField(blank=True, null=True, upload_to='documents_gisements/')),
                ('nom_fichier', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('date_ajout', models.DateTimeField(auto_now_add=True)),
                ('utilisateur', models.ForeignKey(blank=True, help_text="Responsable automatiquement défini à l'utilisateur connecté.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='documents_gisements', to=settings.AUTH_USER_MODEL)),
                ('gisement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='core.gisement')),
            ],
            options={
                'verbose_name': 'Document de gisement',
                'verbose_name_plural': 'Documents de gisement',
                'db_table': 'document_gisement',
                'ordering': ['-date_ajout'],
            },
        ),
        migrations.CreateModel(
            name='Melange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nom du mélange')),
                ('date_creation', models.DateField(default=datetime.date.today)),
                ('date_semis', models.DateField(default=datetime.date.today)),
                ('reference_produit', models.CharField(editable=False, max_length=100, unique=True)),
                ('fournisseur', models.CharField(max_length=255)),
                ('couverture_vegetale', models.CharField(blank=True, max_length=100, null=True)),
                ('periode_melange', models.CharField(max_length=100)),
                ('references_analyses', models.TextField(blank=True, null=True)),
                ('etat', models.IntegerField(choices=[(1, 'Composition'), (2, 'Ordre de conformité'), (3, 'Consignes de mélange'), (4, 'Contrôle +1 mois'), (5, 'Contrôle +2 mois'), (6, 'Validation finale (Fiche technique)')], default=1)),
                ('ordre_conformite', models.FileField(blank=True, null=True, upload_to='documents/ordres_conformite/')),
                ('consignes_melange', models.FileField(blank=True, null=True, upload_to='documents/consignes_melange/')),
                ('controle_1', models.FileField(blank=True, null=True, upload_to='documents/controle_1/')),
                ('controle_2', models.FileField(blank=True, null=True, upload_to='documents/controle_2/')),
                ('fiche_technique', models.FileField(blank=True, null=True, upload_to='documents/fiche_technique/')),
                ('utilisateur', models.ForeignKey(blank=True, help_text="Responsable automatiquement défini à l'utilisateur connecté.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='melanges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Mélange',
                'verbose_name_plural': 'Mélanges',
                'db_table': 'melange',
                'ordering': ['-periode_melange'],
            },
        ),
        migrations.CreateModel(
            name='MelangeIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pourcentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('gisement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.gisement')),
                ('melange', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to='core.melange')),
                ('utilisateur', models.ForeignKey(blank=True, help_text="Responsable automatiquement défini à l'utilisateur connecté.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='melange_ingredients', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Ingrédient de mélange',
                'verbose_name_plural': 'Ingrédients de mélange',
                'db_table': 'melange_ingredient',
                'ordering': ['melange', 'gisement'],
                'unique_together': {('melange', 'gisement')},
            },
        ),
        migrations.AddField(
            model_name='melange',
            name='gisements',
            field=models.ManyToManyField(related_name='melanges', through='core.MelangeIngredient', to='core.gisement'),
        ),
        migrations.CreateModel(
            name='Plateforme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, help_text="Nom de la plateforme, par exemple 'Plateforme de compostage de Paris'", max_length=255, null=True)),
                ('localisation', models.CharField(max_length=255)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('date_creation', models.DateField(default=django.utils.timezone.now)),
                ('responsable', models.ForeignKey(blank=True, help_text="Responsable automatiquement défini à l'utilisateur connecté.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='plateformes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Plateforme',
                'verbose_name_plural': 'Plateformes',
                'db_table': 'plateforme',
                'ordering': ['nom'],
            },
        ),
        migrations.AddField(
            model_name='melange',
            name='plateforme',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.plateforme'),
        ),
        migrations.CreateModel(
            name='AmendementOrganique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(help_text="Nom de l'émendent organique, par exemple 'Fumier de cheval'", max_length=255, unique=True)),
                ('fournisseur', models.CharField(help_text="Fournisseur de l'émendent organique", max_length=255)),
                ('date_reception', models.DateField(default=django.utils.timezone.now)),
                ('date_semis', models.DateField(default=django.utils.timezone.now, help_text="Date de semis de l'émendent organique")),
                ('volume_disponible', models.DecimalField(decimal_places=2, help_text="Volume disponible de l'émendent organique", max_digits=10)),
                ('localisation', models.CharField(blank=True, max_length=255, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('responsable', models.ForeignKey(blank=True, help_text="Responsable automatiquement défini à l'utilisateur connecté.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='emendements', to=settings.AUTH_USER_MODEL)),
                ('utilisateur', models.ForeignKey(blank=True, help_text="Responsable automatiquement défini à l'utilisateur connecté.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='amendements_organique', to=settings.AUTH_USER_MODEL)),
                ('plateforme', models.ForeignKey(blank=True, help_text="Plateforme de compostage ou d'émendement associée.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='emendements', to='core.plateforme')),
            ],
            options={
                'verbose_name': 'Émendent organique',
                'verbose_name_plural': 'Émendements organiques',
                'db_table': 'AmendementOrganique',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='ProduitVente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_produit', models.CharField(max_length=100, unique=True)),
                ('fournisseur', models.CharField(max_length=255)),
                ('nom_site', models.CharField(max_length=255)),
                ('volume_initial', models.DecimalField(decimal_places=2, max_digits=10)),
                ('volume_disponible', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date_disponibilite', models.DateField()),
                ('commentaires_analyses', models.TextField(blank=True)),
                ('volume_vendu', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('acheteur', models.CharField(blank=True, max_length=255, null=True)),
                ('date_achat', models.DateField(blank=True, null=True)),
                ('periode_destockage', models.CharField(blank=True, max_length=255)),
                ('localisation_projet', models.CharField(blank=True, max_length=255)),
                ('date_creation', models.DateField(auto_now_add=True)),
                ('melange', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='produit_vente', to='core.melange')),
                ('utilisateur', models.ForeignKey(blank=True, help_text="Responsable automatiquement défini à l'utilisateur connecté.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='produits_vente', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Produit de vente',
                'verbose_name_plural': 'Produits de vente',
                'db_table': 'produit_vente',
                'ordering': ['-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='DocumentTechnique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom_fichier', models.CharField(max_length=255)),
                ('fichier', models.FileField(upload_to='documents/')),
                ('type_document', models.CharField(choices=[('fiche_produit', 'Fiche produit'), ('radar', 'Radar produit'), ('analyse', 'Analyse laboratoire'), ('description_sol', 'Fiche description sol'), ('protocole', 'Protocole d’échantillonnage'), ('autre', 'Autre')], max_length=100)),
                ('date_ajout', models.DateField(auto_now_add=True)),
                ('produit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='core.produitvente')),
            ],
            options={
                'verbose_name': 'Document technique',
                'verbose_name_plural': 'Documents techniques',
                'db_table': 'document_technique',
                'ordering': ['-date_ajout'],
            },
        ),
        migrations.CreateModel(
            name='AnalyseLaboratoire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('laboratoire', models.CharField(max_length=255)),
                ('code_rapport', models.CharField(max_length=100)),
                ('date_reception', models.DateField()),
                ('date_analyse', models.DateField()),
                ('profondeur_prelevement', models.CharField(blank=True, max_length=100, null=True)),
                ('localisation_echantillon', models.CharField(blank=True, max_length=255, null=True)),
                ('ph_eau', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('ph_kcl', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('calcaire_total', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('calcaire_actif', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('conductivite', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('matiere_organique', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('azote_total', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True)),
                ('c_n', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Rapport C/N')),
                ('cec', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='CEC (meq/100g)')),
                ('saturation', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Taux de saturation (%)')),
                ('argile', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('limons_fins', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('limons_grossiers', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('sables_fins', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('sables_grossiers', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('calcium', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('magnesium', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('potassium', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('phosphore', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='P2O5 (mg/kg)')),
                ('fer', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('cuivre', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('zinc', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('manganese', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('densite_apparente', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('porosite_totale', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('porosite_drainage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('eau_capillaire', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('permeabilite', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Perméabilité (cm/h)')),
                ('iam', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Intensité activité microbienne')),
                ('refus_gravier_2mm', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Refus gravier (>2mm, %)')),
                ('fichier_pdf', models.FileField(blank=True, null=True, upload_to='uploads/analyse_pdfs/')),
                ('commentaires', models.TextField(blank=True, null=True)),
                ('utilisateur', models.ForeignKey(blank=True, help_text="Responsable automatiquement défini à l'utilisateur connecté.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='analyses_laboratoire', to=settings.AUTH_USER_MODEL)),
                ('produit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analyses', to='core.produitvente')),
            ],
            options={
                'verbose_name': 'Analyse de laboratoire',
                'verbose_name_plural': 'Analyses de laboratoire',
                'db_table': 'analyse_laboratoire',
                'ordering': ['-date_analyse'],
            },
        ),
        migrations.CreateModel(
            name='MelangeAmendement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pourcentage', models.DecimalField(blank=True, decimal_places=2, help_text="Pourcentage de l'émendent organique dans le mélange. Si vide, il est calculé automatiquement.", max_digits=5, null=True)),
                ('amendementOrganique', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.amendementorganique')),
                ('melange', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amendements', to='core.melange')),
                ('utlisateur', models.ForeignKey(blank=True, help_text="Responsable automatiquement défini à l'utilisateur connecté.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='melange_amendements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Amendement de mélange',
                'verbose_name_plural': 'Amendements de mélange',
                'db_table': 'melange_emendement',
                'ordering': ['melange', 'amendementOrganique'],
                'unique_together': {('melange', 'amendementOrganique')},
            },
        ),
    ]
